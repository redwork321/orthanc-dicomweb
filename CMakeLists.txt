# Orthanc - A Lightweight, RESTful DICOM Store
# Copyright (C) 2012-2015 Sebastien Jodogne, Medical Physics
# Department, University Hospital of Liege, Belgium
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


cmake_minimum_required(VERSION 2.8)

project(OrthancDicomWeb)

set(ORTHANC_DICOM_WEB_VERSION "1.0")


# Parameters of the build
set(STATIC_BUILD OFF CACHE BOOL "Static build of the third-party libraries (necessary for Windows)")
set(ALLOW_DOWNLOADS OFF CACHE BOOL "Allow CMake to download packages")

# Advanced parameters to fine-tune linking against system libraries
set(USE_SYSTEM_BOOST ON CACHE BOOL "Use the system version of Boost")
set(USE_SYSTEM_GDCM ON CACHE BOOL "Use the system version of Grassroot DICOM (GDCM)")
set(USE_SYSTEM_GOOGLE_TEST ON CACHE BOOL "Use the system version of Google Test")
set(USE_SYSTEM_JSONCPP ON CACHE BOOL "Use the system version of JsonCpp")
SET(USE_SYSTEM_PUGIXML ON CACHE BOOL "Use the system version of Pugixml)")

# Distribution-specific settings
set(USE_GTEST_DEBIAN_SOURCE_PACKAGE OFF CACHE BOOL "Use the sources of Google Test shipped with libgtest-dev (Debian only)")
mark_as_advanced(USE_GTEST_DEBIAN_SOURCE_PACKAGE)

# Force static build when cross-compiling
if (CMAKE_CROSSCOMPILING)
  set(STATIC_BUILD ON)
endif()

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
  SET(OS_LIBRARIES uuid rt dl)
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pthread")
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pthread")
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
  SET(OS_LIBRARIES rpcrt4 ws2_32 secur32)
  if (CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -static-libstdc++")
  endif()
endif ()

if (CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--version-script=${CMAKE_SOURCE_DIR}/Resources/VersionScript.map -Wl,--no-undefined")
endif()

if (MSVC)
  # Use static runtime under Visual Studio
  # http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace
  # http://stackoverflow.com/a/6510446
  foreach(flag_var
    CMAKE_C_FLAGS_DEBUG
    CMAKE_CXX_FLAGS_DEBUG
    CMAKE_C_FLAGS_RELEASE 
    CMAKE_CXX_FLAGS_RELEASE
    CMAKE_C_FLAGS_MINSIZEREL 
    CMAKE_CXX_FLAGS_MINSIZEREL 
    CMAKE_C_FLAGS_RELWITHDEBINFO 
    CMAKE_CXX_FLAGS_RELWITHDEBINFO) 
    string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
    string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
  endforeach(flag_var)

  add_definitions(
    -D_CRT_SECURE_NO_WARNINGS=1
    -D_CRT_NONSTDC_NO_DEPRECATE=1)
endif()


include(CheckIncludeFiles)
include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/DownloadPackage.cmake)

include(${CMAKE_SOURCE_DIR}/Resources/CMake/BoostConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/GdcmConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/GoogleTestConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/JsonCppConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/PugixmlConfiguration.cmake)


# Check that the Orthanc SDK headers are available or download them
set(AUTOGENERATED_DIR ${CMAKE_CURRENT_BINARY_DIR}/AUTOGENERATED)
if (STATIC_BUILD)
  set(ORTHANC_SDK_URL "http://orthanc.googlecode.com/hg-history/Orthanc-0.8.6")
  file(MAKE_DIRECTORY ${AUTOGENERATED_DIR}/orthanc)
  file(DOWNLOAD "${ORTHANC_SDK_URL}/Plugins/Include/OrthancCPlugin.h"
    "${AUTOGENERATED_DIR}/orthanc/OrthancCPlugin.h" SHOW_PROGRESS)
  if (${MSVC})
    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
    file(DOWNLOAD "${ORTHANC_SDK_URL}/Resources/ThirdParty/VisualStudio/stdint.h" 
      "${AUTOGENERATED_DIR}/stdint.h" SHOW_PROGRESS)
  endif()
  include_directories(${AUTOGENERATED_DIR})
else ()
  CHECK_INCLUDE_FILE_CXX(orthanc/OrthancCPlugin.h HAVE_ORTHANC_H)
  if (NOT HAVE_ORTHANC_H)
    message(FATAL_ERROR "Please install the headers of the Orthanc plugins SDK")
  endif()
endif()


set(CORE_SOURCES
  ${BOOST_SOURCES}
  ${JSONCPP_SOURCES}
  ${PUGIXML_SOURCES}
  Core/ChunkedBuffer.cpp
  Core/Configuration.cpp
  Core/Toolbox.cpp
  Core/Dicom.cpp
  Core/MultipartWriter.cpp
  )

add_library(OrthancDicomWeb SHARED ${CORE_SOURCES}
  ${CMAKE_SOURCE_DIR}/Plugin/Plugin.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/QidoRs.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/StowRs.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/WadoRs.cpp
  )

target_link_libraries(OrthancDicomWeb ${GDCM_LIBRARIES} ${OS_LIBRARIES})

message("Setting the version of the library to ${ORTHANC_DICOM_WEB_VERSION}")

add_definitions(-DORTHANC_DICOM_WEB_VERSION="${ORTHANC_DICOM_WEB_VERSION}")

set_target_properties(OrthancDicomWeb PROPERTIES 
  VERSION ${ORTHANC_DICOM_WEB_VERSION} 
  SOVERSION ${ORTHANC_DICOM_WEB_VERSION}
  )

add_executable(UnitTests
  ${CORE_SOURCES}
  ${GTEST_SOURCES}
  UnitTestsSources/UnitTestsMain.cpp
  )

target_link_libraries(UnitTests ${GDCM_LIBRARIES} ${OS_LIBRARIES})

if (STATIC_BUILD OR NOT USE_SYSTEM_GDCM)
  add_dependencies(OrthancDicomWeb GDCM)
  add_dependencies(UnitTests GDCM)
endif()
